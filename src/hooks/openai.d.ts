/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/chat/completions": {
    /** Creates a model response for the given chat conversation. */
    post: operations["createChatCompletion"];
  };
  "/completions": {
    /** Creates a completion for the provided prompt and parameters. */
    post: operations["createCompletion"];
  };
  "/edits": {
    /**
     * Creates a new edit for the provided input, instruction, and parameters.
     * @deprecated
     */
    post: operations["createEdit"];
  };
  "/images/generations": {
    /** Creates an image given a prompt. */
    post: operations["createImage"];
  };
  "/images/edits": {
    /** Creates an edited or extended image given an original image and a prompt. */
    post: operations["createImageEdit"];
  };
  "/images/variations": {
    /** Creates a variation of a given image. */
    post: operations["createImageVariation"];
  };
  "/embeddings": {
    /** Creates an embedding vector representing the input text. */
    post: operations["createEmbedding"];
  };
  "/audio/transcriptions": {
    /** Transcribes audio into the input language. */
    post: operations["createTranscription"];
  };
  "/audio/translations": {
    /** Translates audio into English. */
    post: operations["createTranslation"];
  };
  "/files": {
    /** Returns a list of files that belong to the user's organization. */
    get: operations["listFiles"];
    /** Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. */
    post: operations["createFile"];
  };
  "/files/{file_id}": {
    /** Returns information about a specific file. */
    get: operations["retrieveFile"];
    /** Delete a file. */
    delete: operations["deleteFile"];
  };
  "/files/{file_id}/content": {
    /** Returns the contents of the specified file */
    get: operations["downloadFile"];
  };
  "/fine-tunes": {
    /** List your organization's fine-tuning jobs */
    get: operations["listFineTunes"];
    /**
     * Creates a job that fine-tunes a specified model from a given dataset.
     *
     * Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
     *
     * [Learn more about Fine-tuning](/docs/guides/fine-tuning)
     */
    post: operations["createFineTune"];
  };
  "/fine-tunes/{fine_tune_id}": {
    /**
     * Gets info about the fine-tune job.
     *
     * [Learn more about Fine-tuning](/docs/guides/fine-tuning)
     */
    get: operations["retrieveFineTune"];
  };
  "/fine-tunes/{fine_tune_id}/cancel": {
    /** Immediately cancel a fine-tune job. */
    post: operations["cancelFineTune"];
  };
  "/fine-tunes/{fine_tune_id}/events": {
    /** Get fine-grained status updates for a fine-tune job. */
    get: operations["listFineTuneEvents"];
  };
  "/models": {
    /** Lists the currently available models, and provides basic information about each one such as the owner and availability. */
    get: operations["listModels"];
  };
  "/models/{model}": {
    /** Retrieves a model instance, providing basic information about the model such as the owner and permissioning. */
    get: operations["retrieveModel"];
    /** Delete a fine-tuned model. You must have the Owner role in your organization. */
    delete: operations["deleteModel"];
  };
  "/moderations": {
    /** Classifies if text violates OpenAI's Content Policy */
    post: operations["createModeration"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Error: {
      type: string;
      message: string;
      param: string | null;
      code: string | null;
    };
    ErrorResponse: {
      error: components["schemas"]["Error"];
    };
    ListModelsResponse: {
      object: string;
      data: components["schemas"]["Model"][];
    };
    DeleteModelResponse: {
      id: string;
      object: string;
      deleted: boolean;
    };
    CreateCompletionRequest: {
      /** @description ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. */
      model: string | ("text-davinci-003" | "text-davinci-002" | "text-davinci-001" | "code-davinci-002" | "text-curie-001" | "text-babbage-001" | "text-ada-001");
      /**
       * @description The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
       *
       * Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
       *
       * @default <|endoftext|>
       */
      prompt: string | string[] | number[] | number[][] | null;
      /**
       * @description The suffix that comes after a completion of inserted text.
       * @default null
       * @example test.
       */
      suffix?: string | null;
      /**
       * @description The maximum number of [tokens](/tokenizer) to generate in the completion.
       *
       * The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
       *
       * @default 16
       * @example 16
       */
      max_tokens?: number | null;
      /**
       * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
       *
       * We generally recommend altering this or `top_p` but not both.
       *
       * @default 1
       * @example 1
       */
      temperature?: number | null;
      /**
       * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
       *
       * We generally recommend altering this or `temperature` but not both.
       *
       * @default 1
       * @example 1
       */
      top_p?: number | null;
      /**
       * @description How many completions to generate for each prompt.
       *
       * **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
       *
       * @default 1
       * @example 1
       */
      n?: number | null;
      /**
       * @description Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).
       *
       * @default false
       */
      stream?: boolean | null;
      /**
       * @description Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
       *
       * The maximum value for `logprobs` is 5.
       *
       * @default null
       */
      logprobs?: number | null;
      /**
       * @description Echo back the prompt in addition to the completion
       *
       * @default false
       */
      echo?: boolean | null;
      /**
       * @description Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
       *
       * @default null
       */
      stop?: (string | null) | string[] | null;
      /**
       * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
       *
       * [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
       *
       * @default 0
       */
      presence_penalty?: number | null;
      /**
       * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
       *
       * [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
       *
       * @default 0
       */
      frequency_penalty?: number | null;
      /**
       * @description Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
       *
       * When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return â€“ `best_of` must be greater than `n`.
       *
       * **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
       *
       * @default 1
       */
      best_of?: number | null;
      /**
       * @description Modify the likelihood of specified tokens appearing in the completion.
       *
       * Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
       *
       * As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
       *
       * @default null
       */
      logit_bias?: {
        [key: string]: number;
      } | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *
       * @example user-1234
       */
      user?: string;
    };
    /** @description Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint). */
    CreateCompletionResponse: {
      /** @description A unique identifier for the completion. */
      id: string;
      /** @description The object type, which is always "text_completion" */
      object: string;
      /** @description The Unix timestamp of when the completion was created. */
      created: number;
      /** @description The model used for completion. */
      model: string;
      /** @description The list of completion choices the model generated for the input prompt. */
      choices: ({
          text: string;
          index: number;
          logprobs: {
            tokens?: string[];
            token_logprobs?: number[];
            top_logprobs?: {
                [key: string]: number;
              }[];
            text_offset?: number[];
          } | null;
          /**
           * @description The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
           * or `length` if the maximum number of tokens specified in the request was reached.
           *
           * @enum {string}
           */
          finish_reason: "stop" | "length";
        })[];
      usage?: components["schemas"]["CompletionUsage"];
    };
    ChatCompletionRequestMessage: {
      /**
       * @description The role of the messages author. One of `system`, `user`, `assistant`, or `function`.
       * @enum {string}
       */
      role: "system" | "user" | "assistant" | "function";
      /** @description The contents of the message. `content` is required for all messages, and may be null for assistant messages with function calls. */
      content: string | null;
      /** @description The name of the author of this message. `name` is required if role is `function`, and it should be the name of the function whose response is in the `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters. */
      name?: string;
      /** @description The name and arguments of a function that should be called, as generated by the model. */
      function_call?: {
        /** @description The name of the function to call. */
        name: string;
        /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
        arguments: string;
      };
    };
    /**
     * @description The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
     *
     * To describe a function that accepts no parameters, provide the value `{"type": "object", "properties": {}}`.
     */
    ChatCompletionFunctionParameters: {
      [key: string]: unknown;
    };
    ChatCompletionFunctions: {
      /** @description The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. */
      name: string;
      /** @description A description of what the function does, used by the model to choose when and how to call the function. */
      description?: string;
      parameters: components["schemas"]["ChatCompletionFunctionParameters"];
    };
    /** @description A chat completion message generated by the model. */
    ChatCompletionResponseMessage: {
      /**
       * @description The role of the author of this message.
       * @enum {string}
       */
      role: "system" | "user" | "assistant" | "function";
      /** @description The contents of the message. */
      content: string | null;
      /** @description The name and arguments of a function that should be called, as generated by the model. */
      function_call?: {
        /** @description The name of the function to call. */
        name: string;
        /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
        arguments: string;
      };
    };
    /** @description A chat completion delta generated by streamed model responses. */
    ChatCompletionStreamResponseDelta: {
      /**
       * @description The role of the author of this message.
       * @enum {string}
       */
      role?: "system" | "user" | "assistant" | "function";
      /** @description The contents of the chunk message. */
      content?: string | null;
      /** @description The name and arguments of a function that should be called, as generated by the model. */
      function_call?: {
        /** @description The name of the function to call. */
        name?: string;
        /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
        arguments?: string;
      };
    };
    CreateChatCompletionRequest: {
      /**
       * @description ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
       * @example gpt-3.5-turbo
       */
      model: string | ("gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613" | "gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-3.5-turbo-16k-0613");
      /** @description A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb). */
      messages: components["schemas"]["ChatCompletionRequestMessage"][];
      /** @description A list of functions the model may generate JSON inputs for. */
      functions?: components["schemas"]["ChatCompletionFunctions"][];
      /** @description Controls how the model responds to function calls. "none" means the model does not call a function, and responds to the end-user. "auto" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{"name":\ "my_function"}` forces the model to call that function. "none" is the default when no functions are present. "auto" is the default if functions are present. */
      function_call?: OneOf<["none" | "auto", {
        /** @description The name of the function to call. */
        name: string;
      }]>;
      /**
       * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
       *
       * We generally recommend altering this or `top_p` but not both.
       *
       * @default 1
       * @example 1
       */
      temperature?: number | null;
      /**
       * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
       *
       * We generally recommend altering this or `temperature` but not both.
       *
       * @default 1
       * @example 1
       */
      top_p?: number | null;
      /**
       * @description How many chat completion choices to generate for each input message.
       * @default 1
       * @example 1
       */
      n?: number | null;
      /**
       * @description If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).
       *
       * @default false
       */
      stream?: boolean | null;
      /**
       * @description Up to 4 sequences where the API will stop generating further tokens.
       *
       * @default null
       */
      stop?: (string | null) | string[];
      /**
       * @description The maximum number of [tokens](/tokenizer) to generate in the chat completion.
       *
       * The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
       *
       * @default inf
       */
      max_tokens?: number;
      /**
       * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
       *
       * [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
       *
       * @default 0
       */
      presence_penalty?: number | null;
      /**
       * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
       *
       * [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
       *
       * @default 0
       */
      frequency_penalty?: number | null;
      /**
       * @description Modify the likelihood of specified tokens appearing in the completion.
       *
       * Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
       *
       * @default null
       */
      logit_bias?: {
        [key: string]: number;
      } | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *
       * @example user-1234
       */
      user?: string;
    };
    /** @description Represents a chat completion response returned by model, based on the provided input. */
    CreateChatCompletionResponse: {
      /** @description A unique identifier for the chat completion. */
      id: string;
      /** @description The object type, which is always `chat.completion`. */
      object: string;
      /** @description A unix timestamp of when the chat completion was created. */
      created: number;
      /** @description The model used for the chat completion. */
      model: string;
      /** @description A list of chat completion choices. Can be more than one if `n` is greater than 1. */
      choices: ({
          /** @description The index of the choice in the list of choices. */
          index: number;
          message: components["schemas"]["ChatCompletionResponseMessage"];
          /**
           * @description The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
           * `length` if the maximum number of tokens specified in the request was reached, or `function_call` if the model called a function.
           *
           * @enum {string}
           */
          finish_reason: "stop" | "length" | "function_call";
        })[];
      usage?: components["schemas"]["CompletionUsage"];
    };
    /** @description Represents a streamed chunk of a chat completion response returned by model, based on the provided input. */
    CreateChatCompletionStreamResponse: {
      /** @description A unique identifier for the chat completion chunk. */
      id: string;
      /** @description The object type, which is always `chat.completion.chunk`. */
      object: string;
      /** @description A unix timestamp of when the chat completion chunk was created. */
      created: number;
      /** @description The model to generate the completion. */
      model: string;
      /** @description A list of chat completion choices. Can be more than one if `n` is greater than 1. */
      choices: ({
          /** @description The index of the choice in the list of choices. */
          index: number;
          delta: components["schemas"]["ChatCompletionStreamResponseDelta"];
          /**
           * @description The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
           * `length` if the maximum number of tokens specified in the request was reached, or `function_call` if the model called a function.
           *
           * @enum {string|null}
           */
          finish_reason: "stop" | "length" | "function_call" | null;
        })[];
    };
    CreateEditRequest: {
      /**
       * @description ID of the model to use. You can use the `text-davinci-edit-001` or `code-davinci-edit-001` model with this endpoint.
       * @example text-davinci-edit-001
       */
      model: string | ("text-davinci-edit-001" | "code-davinci-edit-001");
      /**
       * @description The input text to use as a starting point for the edit.
       * @default
       * @example What day of the wek is it?
       */
      input?: string | null;
      /**
       * @description The instruction that tells the model how to edit the prompt.
       * @example Fix the spelling mistakes.
       */
      instruction: string;
      /**
       * @description How many edits to generate for the input and instruction.
       * @default 1
       * @example 1
       */
      n?: number | null;
      /**
       * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
       *
       * We generally recommend altering this or `top_p` but not both.
       *
       * @default 1
       * @example 1
       */
      temperature?: number | null;
      /**
       * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
       *
       * We generally recommend altering this or `temperature` but not both.
       *
       * @default 1
       * @example 1
       */
      top_p?: number | null;
    };
    /** Edit */
    CreateEditResponse: {
      /** @description The object type, which is always `edit`. */
      object: string;
      /** @description A unix timestamp of when the edit was created. */
      created: number;
      /** @description A list of edit choices. Can be more than one if `n` is greater than 1. */
      choices: ({
          /** @description The edited result. */
          text: string;
          /** @description The index of the choice in the list of choices. */
          index: number;
          /**
           * @description The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
           * or `length` if the maximum number of tokens specified in the request was reached.
           *
           * @enum {string}
           */
          finish_reason: "stop" | "length";
        })[];
      usage: components["schemas"]["CompletionUsage"];
    };
    CreateImageRequest: {
      /**
       * @description A text description of the desired image(s). The maximum length is 1000 characters.
       * @example A cute baby sea otter
       */
      prompt: string;
      /**
       * @description The number of images to generate. Must be between 1 and 10.
       * @default 1
       * @example 1
       */
      n?: number | null;
      /**
       * @description The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
       * @default 1024x1024
       * @example 1024x1024
       * @enum {string|null}
       */
      size?: "256x256" | "512x512" | "1024x1024" | null;
      /**
       * @description The format in which the generated images are returned. Must be one of `url` or `b64_json`.
       * @default url
       * @example url
       * @enum {string|null}
       */
      response_format?: "url" | "b64_json" | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *
       * @example user-1234
       */
      user?: string;
    };
    ImagesResponse: {
      created: number;
      data: components["schemas"]["Image"][];
    };
    /** @description Represents the url or the content of an image generated by the OpenAI API. */
    Image: {
      /** @description The URL of the generated image, if `response_format` is `url` (default). */
      url?: string;
      /** @description The base64-encoded JSON of the generated image, if `response_format` is `b64_json`. */
      b64_json?: string;
    };
    CreateImageEditRequest: {
      /**
       * Format: binary
       * @description The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
       */
      image: string;
      /**
       * Format: binary
       * @description An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
       */
      mask?: string;
      /**
       * @description A text description of the desired image(s). The maximum length is 1000 characters.
       * @example A cute baby sea otter wearing a beret
       */
      prompt: string;
      /**
       * @description The number of images to generate. Must be between 1 and 10.
       * @default 1
       * @example 1
       */
      n?: number | null;
      /**
       * @description The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
       * @default 1024x1024
       * @example 1024x1024
       * @enum {string|null}
       */
      size?: "256x256" | "512x512" | "1024x1024" | null;
      /**
       * @description The format in which the generated images are returned. Must be one of `url` or `b64_json`.
       * @default url
       * @example url
       * @enum {string|null}
       */
      response_format?: "url" | "b64_json" | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *
       * @example user-1234
       */
      user?: string;
    };
    CreateImageVariationRequest: {
      /**
       * Format: binary
       * @description The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
       */
      image: string;
      /**
       * @description The number of images to generate. Must be between 1 and 10.
       * @default 1
       * @example 1
       */
      n?: number | null;
      /**
       * @description The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
       * @default 1024x1024
       * @example 1024x1024
       * @enum {string|null}
       */
      size?: "256x256" | "512x512" | "1024x1024" | null;
      /**
       * @description The format in which the generated images are returned. Must be one of `url` or `b64_json`.
       * @default url
       * @example url
       * @enum {string|null}
       */
      response_format?: "url" | "b64_json" | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *
       * @example user-1234
       */
      user?: string;
    };
    CreateModerationRequest: {
      /** @description The input text to classify */
      input: string | string[];
      /**
       * @description Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.
       *
       * The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
       *
       * @default text-moderation-latest
       * @example text-moderation-stable
       */
      model?: string | ("text-moderation-latest" | "text-moderation-stable");
    };
    /** @description Represents policy compliance report by OpenAI's content moderation model against a given input. */
    CreateModerationResponse: {
      /** @description The unique identifier for the moderation request. */
      id: string;
      /** @description The model used to generate the moderation results. */
      model: string;
      /** @description A list of moderation objects. */
      results: {
          /** @description Whether the content violates [OpenAI's usage policies](/policies/usage-policies). */
          flagged: boolean;
          /** @description A list of the categories, and whether they are flagged or not. */
          categories: {
            /** @description Whether the content was flagged as 'hate'. */
            hate: boolean;
            /** @description Whether the content was flagged as 'hate/threatening'. */
            "hate/threatening": boolean;
            /** @description Whether the content was flagged as 'self-harm'. */
            "self-harm": boolean;
            /** @description Whether the content was flagged as 'sexual'. */
            sexual: boolean;
            /** @description Whether the content was flagged as 'sexual/minors'. */
            "sexual/minors": boolean;
            /** @description Whether the content was flagged as 'violence'. */
            violence: boolean;
            /** @description Whether the content was flagged as 'violence/graphic'. */
            "violence/graphic": boolean;
          };
          /** @description A list of the categories along with their scores as predicted by model. */
          category_scores: {
            /** @description The score for the category 'hate'. */
            hate: number;
            /** @description The score for the category 'hate/threatening'. */
            "hate/threatening": number;
            /** @description The score for the category 'self-harm'. */
            "self-harm": number;
            /** @description The score for the category 'sexual'. */
            sexual: number;
            /** @description The score for the category 'sexual/minors'. */
            "sexual/minors": number;
            /** @description The score for the category 'violence'. */
            violence: number;
            /** @description The score for the category 'violence/graphic'. */
            "violence/graphic": number;
          };
        }[];
    };
    ListFilesResponse: {
      object: string;
      data: components["schemas"]["OpenAIFile"][];
    };
    CreateFileRequest: {
      /**
       * Format: binary
       * @description Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.
       *
       * If the `purpose` is set to "fine-tune", each line is a JSON record with "prompt" and "completion" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).
       */
      file: string;
      /**
       * @description The intended purpose of the uploaded documents.
       *
       * Use "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.
       */
      purpose: string;
    };
    DeleteFileResponse: {
      id: string;
      object: string;
      deleted: boolean;
    };
    CreateFineTuneRequest: {
      /**
       * @description The ID of an uploaded file that contains training data.
       *
       * See [upload file](/docs/api-reference/files/upload) for how to upload a file.
       *
       * Your dataset must be formatted as a JSONL file, where each training
       * example is a JSON object with the keys "prompt" and "completion".
       * Additionally, you must upload your file with the purpose `fine-tune`.
       *
       * See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.
       *
       * @example file-ajSREls59WBbvgSzJSVWxMCB
       */
      training_file: string;
      /**
       * @description The ID of an uploaded file that contains validation data.
       *
       * If you provide this file, the data is used to generate validation
       * metrics periodically during fine-tuning. These metrics can be viewed in
       * the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).
       * Your train and validation data should be mutually exclusive.
       *
       * Your dataset must be formatted as a JSONL file, where each validation
       * example is a JSON object with the keys "prompt" and "completion".
       * Additionally, you must upload your file with the purpose `fine-tune`.
       *
       * See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.
       *
       * @example file-XjSREls59WBbvgSzJSVWxMCa
       */
      validation_file?: string | null;
      /**
       * @description The name of the base model to fine-tune. You can select one of "ada",
       * "babbage", "curie", "davinci", or a fine-tuned model created after 2022-04-21.
       * To learn more about these models, see the
       * [Models](https://platform.openai.com/docs/models) documentation.
       *
       * @default curie
       * @example curie
       */
      model?: (string | ("ada" | "babbage" | "curie" | "davinci")) | null;
      /**
       * @description The number of epochs to train the model for. An epoch refers to one
       * full cycle through the training dataset.
       *
       * @default 4
       */
      n_epochs?: number | null;
      /**
       * @description The batch size to use for training. The batch size is the number of
       * training examples used to train a single forward and backward pass.
       *
       * By default, the batch size will be dynamically configured to be
       * ~0.2% of the number of examples in the training set, capped at 256 -
       * in general, we've found that larger batch sizes tend to work better
       * for larger datasets.
       *
       * @default null
       */
      batch_size?: number | null;
      /**
       * @description The learning rate multiplier to use for training.
       * The fine-tuning learning rate is the original learning rate used for
       * pretraining multiplied by this value.
       *
       * By default, the learning rate multiplier is the 0.05, 0.1, or 0.2
       * depending on final `batch_size` (larger learning rates tend to
       * perform better with larger batch sizes). We recommend experimenting
       * with values in the range 0.02 to 0.2 to see what produces the best
       * results.
       *
       * @default null
       */
      learning_rate_multiplier?: number | null;
      /**
       * @description The weight to use for loss on the prompt tokens. This controls how
       * much the model tries to learn to generate the prompt (as compared
       * to the completion which always has a weight of 1.0), and can add
       * a stabilizing effect to training when completions are short.
       *
       * If prompts are extremely long (relative to completions), it may make
       * sense to reduce this weight so as to avoid over-prioritizing
       * learning the prompt.
       *
       * @default 0.01
       */
      prompt_loss_weight?: number | null;
      /**
       * @description If set, we calculate classification-specific metrics such as accuracy
       * and F-1 score using the validation set at the end of every epoch.
       * These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).
       *
       * In order to compute classification metrics, you must provide a
       * `validation_file`. Additionally, you must
       * specify `classification_n_classes` for multiclass classification or
       * `classification_positive_class` for binary classification.
       *
       * @default false
       */
      compute_classification_metrics?: boolean | null;
      /**
       * @description The number of classes in a classification task.
       *
       * This parameter is required for multiclass classification.
       *
       * @default null
       */
      classification_n_classes?: number | null;
      /**
       * @description The positive class in binary classification.
       *
       * This parameter is needed to generate precision, recall, and F1
       * metrics when doing binary classification.
       *
       * @default null
       */
      classification_positive_class?: string | null;
      /**
       * @description If this is provided, we calculate F-beta scores at the specified
       * beta values. The F-beta score is a generalization of F-1 score.
       * This is only used for binary classification.
       *
       * With a beta of 1 (i.e. the F-1 score), precision and recall are
       * given the same weight. A larger beta score puts more weight on
       * recall and less on precision. A smaller beta score puts more weight
       * on precision and less on recall.
       *
       * @default null
       * @example [
       *   0.6,
       *   1,
       *   1.5,
       *   2
       * ]
       */
      classification_betas?: number[] | null;
      /**
       * @description A string of up to 40 characters that will be added to your fine-tuned model name.
       *
       * For example, a `suffix` of "custom-model-name" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.
       *
       * @default null
       */
      suffix?: string | null;
    };
    ListFineTunesResponse: {
      object: string;
      data: components["schemas"]["FineTune"][];
    };
    ListFineTuneEventsResponse: {
      object: string;
      data: components["schemas"]["FineTuneEvent"][];
    };
    CreateEmbeddingRequest: {
      /**
       * @description ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
       *
       * @example text-embedding-ada-002
       */
      model: string | "text-embedding-ada-002";
      /**
       * @description Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed the max input tokens for the model (8191 tokens for `text-embedding-ada-002`). [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
       *
       * @example The quick brown fox jumped over the lazy dog
       */
      input: string | string[] | number[] | number[][];
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *
       * @example user-1234
       */
      user?: string;
    };
    CreateEmbeddingResponse: {
      /** @description The object type, which is always "embedding". */
      object: string;
      /** @description The name of the model used to generate the embedding. */
      model: string;
      /** @description The list of embeddings generated by the model. */
      data: components["schemas"]["Embedding"][];
      /** @description The usage information for the request. */
      usage: {
        /** @description The number of tokens used by the prompt. */
        prompt_tokens: number;
        /** @description The total number of tokens used by the request. */
        total_tokens: number;
      };
    };
    CreateTranscriptionRequest: {
      /**
       * Format: binary
       * @description The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
       */
      file: string;
      /**
       * @description ID of the model to use. Only `whisper-1` is currently available.
       *
       * @example whisper-1
       */
      model: string | "whisper-1";
      /** @description An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. */
      prompt?: string;
      /**
       * @description The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
       *
       * @default json
       * @enum {string}
       */
      response_format?: "json" | "text" | "srt" | "verbose_json" | "vtt";
      /**
       * @description The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
       *
       * @default 0
       */
      temperature?: number;
      /** @description The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. */
      language?: string;
    };
    CreateTranscriptionResponse: {
      text: string;
    };
    CreateTranslationRequest: {
      /**
       * Format: binary
       * @description The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
       */
      file: string;
      /**
       * @description ID of the model to use. Only `whisper-1` is currently available.
       *
       * @example whisper-1
       */
      model: string | "whisper-1";
      /** @description An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. */
      prompt?: string;
      /**
       * @description The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
       *
       * @default json
       */
      response_format?: string;
      /**
       * @description The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
       *
       * @default 0
       */
      temperature?: number;
    };
    CreateTranslationResponse: {
      text: string;
    };
    /**
     * Model
     * @description Describes an OpenAI model offering that can be used with the API.
     */
    Model: {
      /** @description The model identifier, which can be referenced in the API endpoints. */
      id: string;
      /** @description The object type, which is always "model". */
      object: string;
      /** @description The date and time when the model was created. */
      created: number;
      /** @description The organization that owns the model. */
      owned_by: string;
    };
    /**
     * OpenAIFile
     * @description The `File` object represents a document that has been uploaded to OpenAI.
     */
    OpenAIFile: {
      /** @description The file identifier, which can be referenced in the API endpoints. */
      id: string;
      /** @description The object type, which is always "file". */
      object: string;
      /** @description The size of the file in bytes. */
      bytes: number;
      /** @description The unix timestamp for when the file was created. */
      created_at: number;
      /** @description The name of the file. */
      filename: string;
      /** @description The intended purpose of the file. Currently, only "fine-tune" is supported. */
      purpose: string;
      /** @description The current status of the file, which can be either `uploaded`, `processed`, `pending`, `error`, `deleting` or `deleted`. */
      status?: string;
      /** @description Additional details about the status of the file. If the file is in the `error` state, this will include a message describing the error. */
      status_details?: string | null;
    };
    /** @description Represents an embedding vector returned by embedding endpoint. */
    Embedding: {
      /** @description The index of the embedding in the list of embeddings. */
      index: number;
      /** @description The object type, which is always "embedding". */
      object: string;
      /** @description The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings). */
      embedding: number[];
    };
    /**
     * FineTune
     * @description The `FineTune` object represents a fine-tuning job that has been created through the API.
     */
    FineTune: {
      /** @description The object identifier, which can be referenced in the API endpoints. */
      id: string;
      /** @description The object type, which is always "fine-tune". */
      object: string;
      /** @description The unix timestamp for when the fine-tuning job was created. */
      created_at: number;
      /** @description The unix timestamp for when the fine-tuning job was last updated. */
      updated_at: number;
      /** @description The base model that is being fine-tuned. */
      model: string;
      /** @description The name of the fine-tuned model that is being created. */
      fine_tuned_model: string | null;
      /** @description The organization that owns the fine-tuning job. */
      organization_id: string;
      /** @description The current status of the fine-tuning job, which can be either `created`, `pending`, `running`, `succeeded`, `failed`, or `cancelled`. */
      status: string;
      /** @description The hyperparameters used for the fine-tuning job. See the [Fine-tuning Guide](/docs/guides/fine-tuning/hyperparameters) for more details. */
      hyperparams: {
        /**
         * @description The number of epochs to train the model for. An epoch refers to one
         * full cycle through the training dataset.
         */
        n_epochs: number;
        /**
         * @description The batch size to use for training. The batch size is the number of
         * training examples used to train a single forward and backward pass.
         */
        batch_size: number;
        /** @description The weight to use for loss on the prompt tokens. */
        prompt_loss_weight: number;
        /** @description The learning rate multiplier to use for training. */
        learning_rate_multiplier: number;
        /** @description The classification metrics to compute using the validation dataset at the end of every epoch. */
        compute_classification_metrics?: boolean;
        /** @description The positive class to use for computing classification metrics. */
        classification_positive_class?: string;
        /** @description The number of classes to use for computing classification metrics. */
        classification_n_classes?: number;
      };
      /** @description The list of files used for training. */
      training_files: components["schemas"]["OpenAIFile"][];
      /** @description The list of files used for validation. */
      validation_files: components["schemas"]["OpenAIFile"][];
      /** @description The compiled results files for the fine-tuning job. */
      result_files: components["schemas"]["OpenAIFile"][];
      /** @description The list of events that have been observed in the lifecycle of the FineTune job. */
      events?: components["schemas"]["FineTuneEvent"][];
    };
    /** FineTuneEvent */
    FineTuneEvent: {
      object: string;
      created_at: number;
      level: string;
      message: string;
    };
    /** @description Usage statistics for the completion request. */
    CompletionUsage: {
      /** @description Number of tokens in the prompt. */
      prompt_tokens: number;
      /** @description Number of tokens in the generated completion. */
      completion_tokens: number;
      /** @description Total number of tokens used in the request (prompt + completion). */
      total_tokens: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Creates a model response for the given chat conversation. */
  createChatCompletion: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateChatCompletionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateChatCompletionResponse"];
        };
      };
    };
  };
  /** Creates a completion for the provided prompt and parameters. */
  createCompletion: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCompletionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateCompletionResponse"];
        };
      };
    };
  };
  /**
   * Creates a new edit for the provided input, instruction, and parameters.
   * @deprecated
   */
  createEdit: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEditRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateEditResponse"];
        };
      };
    };
  };
  /** Creates an image given a prompt. */
  createImage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateImageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ImagesResponse"];
        };
      };
    };
  };
  /** Creates an edited or extended image given an original image and a prompt. */
  createImageEdit: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["CreateImageEditRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ImagesResponse"];
        };
      };
    };
  };
  /** Creates a variation of a given image. */
  createImageVariation: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["CreateImageVariationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ImagesResponse"];
        };
      };
    };
  };
  /** Creates an embedding vector representing the input text. */
  createEmbedding: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEmbeddingRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateEmbeddingResponse"];
        };
      };
    };
  };
  /** Transcribes audio into the input language. */
  createTranscription: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["CreateTranscriptionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateTranscriptionResponse"];
        };
      };
    };
  };
  /** Translates audio into English. */
  createTranslation: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["CreateTranslationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateTranslationResponse"];
        };
      };
    };
  };
  /** Returns a list of files that belong to the user's organization. */
  listFiles: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListFilesResponse"];
        };
      };
    };
  };
  /** Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. */
  createFile: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["CreateFileRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OpenAIFile"];
        };
      };
    };
  };
  /** Returns information about a specific file. */
  retrieveFile: {
    parameters: {
      path: {
        /** @description The ID of the file to use for this request */
        file_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OpenAIFile"];
        };
      };
    };
  };
  /** Delete a file. */
  deleteFile: {
    parameters: {
      path: {
        /** @description The ID of the file to use for this request */
        file_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteFileResponse"];
        };
      };
    };
  };
  /** Returns the contents of the specified file */
  downloadFile: {
    parameters: {
      path: {
        /** @description The ID of the file to use for this request */
        file_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** List your organization's fine-tuning jobs */
  listFineTunes: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListFineTunesResponse"];
        };
      };
    };
  };
  /**
   * Creates a job that fine-tunes a specified model from a given dataset.
   *
   * Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
   *
   * [Learn more about Fine-tuning](/docs/guides/fine-tuning)
   */
  createFineTune: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFineTuneRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FineTune"];
        };
      };
    };
  };
  /**
   * Gets info about the fine-tune job.
   *
   * [Learn more about Fine-tuning](/docs/guides/fine-tuning)
   */
  retrieveFineTune: {
    parameters: {
      path: {
        /** @description The ID of the fine-tune job */
        fine_tune_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FineTune"];
        };
      };
    };
  };
  /** Immediately cancel a fine-tune job. */
  cancelFineTune: {
    parameters: {
      path: {
        /** @description The ID of the fine-tune job to cancel */
        fine_tune_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FineTune"];
        };
      };
    };
  };
  /** Get fine-grained status updates for a fine-tune job. */
  listFineTuneEvents: {
    parameters: {
      query?: {
        /**
         * @description Whether to stream events for the fine-tune job. If set to true,
         * events will be sent as data-only
         * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
         * as they become available. The stream will terminate with a
         * `data: [DONE]` message when the job is finished (succeeded, cancelled,
         * or failed).
         *
         * If set to false, only events generated so far will be returned.
         */
        stream?: boolean;
      };
      path: {
        /** @description The ID of the fine-tune job to get events for. */
        fine_tune_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListFineTuneEventsResponse"];
        };
      };
    };
  };
  /** Lists the currently available models, and provides basic information about each one such as the owner and availability. */
  listModels: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListModelsResponse"];
        };
      };
    };
  };
  /** Retrieves a model instance, providing basic information about the model such as the owner and permissioning. */
  retrieveModel: {
    parameters: {
      path: {
        /** @description The ID of the model to use for this request */
        model: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Model"];
        };
      };
    };
  };
  /** Delete a fine-tuned model. You must have the Owner role in your organization. */
  deleteModel: {
    parameters: {
      path: {
        /** @description The model to delete */
        model: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteModelResponse"];
        };
      };
    };
  };
  /** Classifies if text violates OpenAI's Content Policy */
  createModeration: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateModerationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateModerationResponse"];
        };
      };
    };
  };
}
